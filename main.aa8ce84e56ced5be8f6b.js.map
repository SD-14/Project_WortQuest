{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/engine.ts","webpack:///./src/entities/observer.ts","webpack:///./src/helpers/sprite.ts","webpack:///./src/helpers/task.ts","webpack:///./src/helpers/task-queue.ts","webpack:///./src/helpers/animation.ts","webpack:///./src/helpers/animator.ts","webpack:///./src/helpers/npc.ts","webpack:///./src/helpers/delay.ts","webpack:///./src/data/index.ts","webpack:///./src/entities/player.ts","webpack:///./src/entities/camera.ts","webpack:///./src/entities/level.ts","webpack:///./src/entities/input.ts","webpack:///./src/entities/npc-manager.ts","webpack:///./src/entities/dialogue.ts","webpack:///./src/entities/battle/battle.ts","webpack:///./src/entities/battle/battle-component.ts","webpack:///./src/entities/battle/hp.ts","webpack:///./src/entities/battle/ui.ts","webpack:///./src/entities/battle/player-ui.ts","webpack:///./src/entities/battle/enemy-ui.ts","webpack:///./src/entities/battle/fighter.ts","webpack:///./src/entities/battle/player-fighter.ts","webpack:///./src/entities/battle/enemy-fighter.ts","webpack:///./src/entities/battle/backdrop.ts","webpack:///./src/entities/battle/arena.ts","webpack:///./src/entities/battle/index.ts","webpack:///./src/index.ts","webpack:///./src/game.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","taskQueue","this","_observers","_intervalId","_taskQueue","addObserver","observer","push","removeObserver","filter","loop","isTaskAvailable","forEach","update","currentTask","endCurrentTask","start","window","setInterval","stop","clearInterval","init","task","handleUpdate","path","grid","sheet","width","height","loadImageData","Promise","resolve","reject","image","Image","src","onload","onerror","imageWidth","imageHeight","columns","rows","x","action","_tasks","addTask","shift","speed","getAnimatedElement","_name","_sheet","_speed","_animatedElement","play","spriteCounter","length","y","style","backgroundPosition","animatedElement","_animations","addAnimation","animation","Animation","Error","currentFacingPosition","sprite","Sprite","_currentFacingPosition","domElement","hasBattled","handleMovement","direction","npcPositionOnDOM","left","top","up","down","right","setNPCPositionOnDom","ejectFromDom","remove","faceTowardsPlayer","setFacingPosition","Number","substring","setFacingPositions","_npcFacingPositions","createElement","element","document","backgroundImage","backgroundRepeat","position","transition","setInitialPositionOnDom","startingPosition","positionOnDOM","_position","delay","time","setTimeout","levels","home","pokemonCenter","gymEntrance","gymArena1PreBattle","gymArena2PreBattle","gymArena3PreBattle","gymArena4PreBattle","gymArena5PreBattle","gymArena1PostBattle","gymArena2PostBattle","gymArena3PostBattle","gymArena4PostBattle","gymArena5PostBattle","gymArena6","currentLevel","isSceneTransition","getSceneTransition","isInteraction","getInteraction","isSpaceWalkable","_nearbyVocabObject","animator","_currentLevel","_storedBackgroundPositions","_acceptedTasks","Set","_playerFacingPositions","has","handleSceneTransitionStart","handleInteraction","resetGym","getTargetedPosition","updatePositionOnDOM","find","obj","Task","playerPositionOnDOM","playerPosition","playerFacingPosition","level","console","log","setPlayerPositionOnDom","interaction","type","willChange","debug","className","dataset","toString","getElementById","append","createAnimations","handleVocabInteraction","alert","german","Observer","backgroundElement","isDebugMode","_visibleWidth","_visibleHeight","_collisionWidth","_collisionHeight","_playerBoundaries","_isDebugMode","_player","_backgroundElement","_cameraPosition","maxLeft","maxRight","maxTop","maxBottom","selectedMovement","moveCamera","currentBackgroundPosition","backgroundPositionOnDOM","backgroundPositionX","backgroundPositionY","border","boxSizing","player","root","default","triggerDebugView","changeGrid","changeMap","getTile","sceneTransition","isWalkable","tile","textContent","gridName","shiftBackgroundPosition","playerSpawnPoint","backgroundSpawnPoint","_isDisabled","_isWalking","_currentMode","_movementKeys","_keyTable","walking","dialogue","battle","bool","handleSceneTransitionEnd","handleNPCInteractionStart","handleNPCInteractionEnd","handleBattleStart","handleBattleNavigateAnswer","handleDisableInput","handleEnableInput","handleSimulateInput","handleInput","isDisabled","keyTable","startWalkingLoop","handleWalkingLogic","stopWalkingLoop","_walkingInterval","addEventListener","_root","_npcs","npcData","npcs","handleNPCMovement","npc","switchLevel","npcElements","map","newLevel","facingPosition","_currentDialogue","_writingIntervalId","_currentWritingText","_dialogues","_isShowing","containerElement","headingElement","contentElement","handleDialogue","handleNPCBattleEnd","hide","heading","content","join","text","isTrigger","Array","isArray","a","split","writeText","postBattle","preBattle","show","letter","Shashank","isShowing","bottom","opacity","container","borderRadius","backgroundColor","fontSize","paddingLeft","headingLine","margin","padding","_stagedFeedback","awaiting","correctIndexes","justAnswered","awaitingSummary","_battleData","_currentLevelQuestionData","_currentQuestions","_selectedQuestionData","_battleComponents","arena","backdrop","BackDrop","enemyFighter","enemyUI","EnemyUI","playerFighter","PlayerFighter","playerUI","PlayerUI","playerHP","HP","enemyHP","handleBattleEnd","handleBattle","wasLoss","Delay","values","component","resetSelection","reset","selected","selectedAnswer","correctRaw","_currentQuestion","correct","correctArr","isMulti","isCorrect","includes","highlightMultipleCorrect","feedbackCorrect","damage","isDead","winningMessage","onWin","setAnswers","answers","question","setCorrect","feedback","feedbackCorrectOptions","setWrong","feedbackWrongOptions","feedbackWrong","losingMessage","onLoss","message","fn","fighter","questions","questionDifficulties","allQuestions","q","difficulty","shuffleQuestions","background","damageToEnemy","damageToPlayer","title","openingMessage","set","setDamageCounter","randomNum","Math","floor","random","placeHolder","loadPlayerUI","beginQuestion","loadHealthBars","showOpeningMessage","showStartingMessage","loadEnemyUI","loadInCharacters","setupBattleBackground","setupBackdrop","isPlayer","_health","_damage","_classBase","_movingPosition","_healthBarContainer","querySelector","_healthBar","firstElementChild","BattleComponent","_uiContainer","_answerElements","querySelectorAll","_selectedAnswer","classList","add","removeSelectedClass","addSelectedClass","indexes","idx","selectNextAnswer","selectPreviousAnswer","UI","_content","_characterContainer","blinks","intervalId","Fighter","_selectedBackgroundPosition","_sprite","_fighterBackgrounds","then","Brett","Min","Dane","Tomo","Blaine","Chi","Brock","_backDropElement","_arenaElement","_arenaBackgrounds","normal","rock","dirt","ghost","grass","water","psychic","ocean","ice","plant","$root","TaskQueue","engine","npcManager","camera","input","setupDOM","args","playerElement","cameraElement","dialogueElement","e","code"],"mappings":"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","file":"main.aa8ce84e56ced5be8f6b.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"/7QA\");\n","import { Observer } from './entities'\nimport { TaskQueue } from './helpers'\n\nexport default class Engine {\n  private _observers: Array<Observer>\n  private _intervalId: number\n  private _taskQueue: TaskQueue\n  constructor(taskQueue: TaskQueue) {\n    this._observers = []\n    this._intervalId = null\n    this._taskQueue = taskQueue\n  }\n  addObserver(observer: Observer): void {\n    this._observers.push(observer)\n  }\n  removeObserver(observer: Observer): void {\n    this._observers = this._observers.filter(o => o !== observer)\n  }\n  loop(): void {\n    if(!this._taskQueue.isTaskAvailable) return\n    this._observers.forEach(o => o.update(this._taskQueue.currentTask))\n    this._taskQueue.endCurrentTask()\n  }\n  start(): void {\n    this._intervalId = window.setInterval(this.loop.bind(this), 1000/60)\n  }\n  stop(): void {\n    clearInterval(this._intervalId)\n  }\n  init(): void {\n    this.start()\n  }\n}\n","import { Task } from \"../helpers\"\n\nexport abstract class Observer {\n  abstract handleUpdate (task: Task): void\n\n  update(task: Task): void {\n    this.handleUpdate(task)\n  }\n}\n","export class Sprite {\n  public name: string\n  public path: string\n  public grid: number[]\n  public sheet: number[][]\n  public width: number\n  public height: number\n  constructor(name: string, path: string, grid: number[]) {\n    this.name = name\n    this.path = path\n    this.grid = grid\n    this.sheet = null\n    this.width = null\n    this.height = null\n  }\n  async loadImageData(): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const image = new Image()\n      image.src = this.path\n      image.onload = () => resolve([image.width, image.height])\n      image.onerror = reject\n    })\n  }\n  async init(): Promise<void> {\n    const [imageWidth, imageHeight] = await this.loadImageData()\n    const [columns, rows] = this.grid\n    const sheet = []\n    this.width = imageWidth / columns\n    this.height = imageHeight / rows\n    for(let x = 0; x < columns; x++) {\n      for (let i = 0; i < rows; i++) {\n        sheet.push([-(x * this.width), -(i * this.height)])\n      }\n    }\n    this.sheet = sheet\n  }\n}\n","export class Task {\n  public name: string\n  public action: any\n  constructor(name: string, action: any = null) {\n    this.name = name\n    this.action = action\n  }\n}\n","import { Task } from \"./\"\n\nexport class TaskQueue {\n  private _tasks: Array<Task>\n  constructor() {\n    this._tasks = []\n  }\n  get currentTask () {\n    return this._tasks[0] || null\n  }\n  get isTaskAvailable () {\n    return !!this._tasks[0]\n  }\n  addTask(task: Task): void {\n    this._tasks.push(task)\n  }\n  endCurrentTask(): void {\n    this._tasks.shift()\n  }\n}\n","export class Animation {\n  private _name: string\n  private _sheet: number[][]\n  private _speed: number\n  private _intervalId: number\n  private _animatedElement: HTMLElement\n  constructor(name: string, sheet: number[][], speed: number, getAnimatedElement: HTMLElement) {\n    this._name = name\n    this._sheet = sheet\n    this._speed = speed\n    this._intervalId = null\n    this._animatedElement = getAnimatedElement\n  }\n  play(): void {\n    clearInterval(this._intervalId)\n    let spriteCounter = 0\n    this._intervalId = window.setInterval(() => {\n      if(spriteCounter === this._sheet.length) return clearInterval(this._intervalId)\n      const [x, y] = this._sheet[spriteCounter]\n      this._animatedElement.style.backgroundPosition = `${x}px ${y - 24}px`\n      spriteCounter++\n    }, this._speed)\n  }\n}\n","import { Animations } from \"../interfaces/animations\"\nimport { Animation } from './animation'\n\nexport class Animator {\n  private _animations: Animations\n  private _animatedElement: HTMLElement\n  constructor(animatedElement: HTMLElement) {\n    this._animations = {}\n    this._animatedElement = animatedElement\n  }\n  get animatedElement(): HTMLElement {\n    return this._animatedElement\n  }\n  addAnimation(name: string, sheet: number[][], speed: number): void {\n    const animation = new Animation(name, sheet, speed, this.animatedElement)\n    this._animations[name] = animation\n  }\n  play(name: string): void {\n    if(!this._animations[name]) throw new Error(`Missing Animation named ${name}`)\n    this._animations[name].play()\n  }\n}\n","import { Movements, PlayerFacingPositions, Position} from \"../interfaces\";\nimport { Sprite } from \".\";\n\nexport class NPC {\n  public name: string\n  public sprite: Sprite\n  public domElement: HTMLElement\n  public width: number\n  public height: number\n  private hasBattled: boolean\n  private _position: Position\n  private _npcFacingPositions: PlayerFacingPositions\n  private _currentFacingPosition: keyof PlayerFacingPositions\n  constructor(\n    name: string,\n    path: string,\n    currentFacingPosition: keyof PlayerFacingPositions\n  ) {\n    this.name = name\n    this.sprite = new Sprite(name, path, [4, 1])\n    this._currentFacingPosition = currentFacingPosition\n    this.domElement = null\n    this.width = null\n    this.height = null\n    this.hasBattled = false\n  }\n  handleMovement(direction: keyof Movements): void {\n    let [left, top] = this.npcPositionOnDOM\n    const movements: Movements = {\n      up: () => top -= this.height,\n      down: () => top += this.height,\n      left: () => left -= this.width,\n      right: () => left += this.width\n    }\n    movements[direction]()\n    this.setNPCPositionOnDom(left, top)\n  }\n  ejectFromDom(): void {\n    this.domElement.remove()\n  }\n  faceTowardsPlayer(direction: keyof Movements) {\n    const oppositeDirections: object = {\n      up: 'down',\n      down: 'up',\n      left: 'right',\n      right: 'left'\n    }\n    this._currentFacingPosition = oppositeDirections[direction]\n    this.setFacingPosition()\n  }\n  get npcPositionOnDOM(): number[] {\n    const { left, top } = this.domElement.style\n    const newLeft = Number(left.substring(0, left.length - 2))\n    const newTop = Number(top.substring(0, top.length - 2))\n    return [newLeft, newTop]\n  }\n  setNPCPositionOnDom(x: number, y: number): void {\n    this.domElement.style.left = `${x}px`\n    this.domElement.style.top = `${y}px`\n  }\n  setFacingPositions() {\n    const { sheet } = this.sprite\n    this._npcFacingPositions = {\n      'up': sheet[1],\n      'down': sheet[0],\n      'right': sheet[3],\n      'left': sheet[2],\n    }\n  }\n  setFacingPosition(): void {\n    const [x, y] = this._npcFacingPositions[this._currentFacingPosition]\n    this.domElement.style.backgroundPosition = `${x}px ${y - 24}px`\n  }\n  createElement(): HTMLElement {\n    const element = document.createElement('div')\n    const { path, sheet, width, height } = this.sprite\n    const [[x, y]] = sheet\n    this.width = width\n    this.height = height\n    element.style.backgroundImage = `url('${path}')`\n    element.style.backgroundPosition = `${x}px ${y - 24}px`\n    element.style.backgroundRepeat = 'no-repeat'\n    element.style.width = `${width}px`\n    element.style.height = `${height}px`\n    element.style.position = 'absolute'\n    element.style.transition = 'left 500ms, top 500ms'\n    return element\n  }\n  setInitialPositionOnDom(x: number, y:number): void {\n    this.domElement.style.top = `${y}px`\n    this.domElement.style.left = `${x}px`\n  }\n  async init(startingPosition: Position, positionOnDOM: number[]): Promise<HTMLElement> {\n    this._position = startingPosition\n    const [x, y] = positionOnDOM\n    await this.sprite.init()\n    this.domElement = this.createElement()\n    this.setFacingPositions()\n    this.setFacingPosition()\n    this.setInitialPositionOnDom(x, y)\n    return this.domElement\n  }\n}\n","export class Delay {\n  static async delay(time: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, time))\n  }\n}\n","import * as  home from './home.json'\nimport * as  pokemonCenter from './pokemon-center.json'\nimport * as  gymEntrance from './gym-entrance.json'\nimport * as  gymArena1PreBattle from './gym-arena-1-pre-battle.json'\nimport * as  gymArena2PreBattle from './gym-arena-2-pre-battle.json'\nimport * as  gymArena3PreBattle from './gym-arena-3-pre-battle.json'\nimport * as  gymArena4PreBattle from './gym-arena-4-pre-battle.json'\nimport * as  gymArena5PreBattle from './gym-arena-5-pre-battle.json'\nimport * as  gymArena1PostBattle from './gym-arena-1-post-battle.json'\nimport * as  gymArena2PostBattle from './gym-arena-2-post-battle.json'\nimport * as  gymArena3PostBattle from './gym-arena-3-post-battle.json'\nimport * as  gymArena4PostBattle from './gym-arena-4-post-battle.json'\nimport * as  gymArena5PostBattle from './gym-arena-5-post-battle.json'\nimport * as  gymArena6 from './gym-arena-6.json'\nimport * as  npcData from './npc.json'\nimport * as  dialogueData from './dialogue.json'\nimport * as  generalQuestions from './general-questions.json'\nimport * as  battleData from './battle.json'\nimport * as vocabObjects from './vocab-objects.json'\n\nconst levels = {\n  home,\n  pokemonCenter,\n  gymEntrance,\n  gymArena1PreBattle,\n  gymArena2PreBattle,\n  gymArena3PreBattle,\n  gymArena4PreBattle,\n  gymArena5PreBattle,\n  gymArena1PostBattle,\n  gymArena2PostBattle,\n  gymArena3PostBattle,\n  gymArena4PostBattle,\n  gymArena5PostBattle,\n  gymArena6\n}\n\nexport {\n  levels,\n  npcData,\n  dialogueData,\n  battleData,\n  generalQuestions,\n  vocabObjects\n}\n","import { Animator, Sprite, Task, TaskQueue } from '../helpers'\nimport { Observer } from './'\nimport { Levels, Movements, PlayerFacingPositions, Position, StoredBackgroundPositions } from '../interfaces'\nimport { vocabObjects } from '../data'\n\nexport class Player extends Observer {\n  public sprite: Sprite\n  public animator: Animator\n  public domElement: HTMLElement\n  public width: number\n  public height: number\n  public getSceneTransition: Function\n  public isSpaceWalkable: Function\n  public isSceneTransition: Function\n  public isInteraction: Function\n  public getInteraction: Function\n  private _taskQueue: TaskQueue\n  private _acceptedTasks: Set<string>\n  private _position: Position\n  private _playerFacingPositions: PlayerFacingPositions\n  private _currentLevel: keyof Levels\n  private _storedBackgroundPositions: StoredBackgroundPositions\n  private _currentFacingPosition: keyof PlayerFacingPositions\n  private _nearbyVocabObject: any = null;\n  constructor(\n    name: string,\n    path: string,\n    grid: number[],\n    taskQueue: TaskQueue,\n    currentLevel: keyof Levels,\n    isSceneTransition: Function,\n    getSceneTransition: Function,\n    isInteraction: Function,\n    getInteraction: Function,\n    isSpaceWalkable: Function\n  ) {\n    super()\n    this.sprite = new Sprite(name, path, grid)\n    this.animator = null\n    this.domElement = null\n    this.width = null\n    this.height = null\n    this._taskQueue = taskQueue\n    this._currentLevel = currentLevel\n    this._storedBackgroundPositions = {}\n    this._acceptedTasks = new Set(['movement', 'scene-transition-start', 'interaction'])\n    this._position = null\n    this._playerFacingPositions = null\n    this._currentFacingPosition = 'down'\n    this.getSceneTransition = getSceneTransition\n    this.isSpaceWalkable = isSpaceWalkable\n    this.isSceneTransition = isSceneTransition\n    this.isInteraction = isInteraction\n    this.getInteraction = getInteraction\n  }\n  handleUpdate({name, action}: Task): void {\n    if(!this._acceptedTasks.has(name)) return\n    switch(name) {\n      case 'movement':\n        this.handleMovement(action as keyof Movements)\n      break\n      case 'scene-transition-start':\n        this.handleSceneTransitionStart(action)\n      break\n      case 'interaction':\n        this.handleInteraction()\n      break\n    }\n  }\n  resetGym(): void {\n    [\n      'gymEntrance',\n      'gymArena1PreBattle',\n      'gymArena2PreBattle',\n      'gymArena3PreBattle',\n      'gymArena4PreBattle',\n      'gymArena5PreBattle',\n      'gymArena1PostBattle',\n      'gymArena2PostBattle',\n      'gymArena3PostBattle',\n      'gymArena4PostBattle',\n      'gymArena5PostBattle',\n      'gymArena6'\n    ].forEach(l => delete this._storedBackgroundPositions[l])\n  }\n  getTargetedPosition(direction: keyof Movements): Position {\n    const position: Position = { ...this._position }\n    const movements: Movements = {\n      up: p => p.y--,\n      down: p => p.y++,\n      left: p => p.x--,\n      right: p => p.x++\n    }\n    movements[direction](position)\n    return position\n  }\n  handleMovement(direction: keyof Movements): void {\n    const position = this.getTargetedPosition(direction)\n    const { x, y } = position\n    this.setFacingPosition(direction)\n    if(!this.isSpaceWalkable(x, y)) return\n    this.animator.play(direction)\n    this._position = position\n    this.updatePositionOnDOM(direction)\n    // Check for nearby vocab object\n    this._nearbyVocabObject = vocabObjects.find(obj => obj.x === x && obj.y === y)\n    if(this._nearbyVocabObject) {\n      // Optionally, visually indicate interaction is possible\n      // e.g., highlight object or show an icon\n    }\n    if(this.isSceneTransition(x, y)) {\n      this._taskQueue.addTask(\n        new Task(\n          'scene-transition-start',\n          this.getSceneTransition(x, y)\n        )\n      )\n      this._taskQueue.addTask(\n        new Task(\n          'scene-transition-end',\n          null\n        )\n      )\n    }\n  }\n  handleSceneTransitionStart(action: any) {\n    this._storedBackgroundPositions[this._currentLevel] = this.playerPositionOnDOM\n    this._storedBackgroundPositions[this._currentLevel]\n    const {\n      playerPositionOnDOM,\n      playerPosition,\n      playerFacingPosition,\n      level\n    } = action\n    this._currentLevel = level\n    console.log(this._storedBackgroundPositions[this._currentLevel])\n    const [x, y] = this._storedBackgroundPositions[this._currentLevel]\n                    || playerPositionOnDOM\n    this.setFacingPosition(playerFacingPosition)\n    this._position = playerPosition\n    this.setPlayerPositionOnDom(x, y)\n    if(level === 'home') this.resetGym()\n  }\n  handleInteraction(): void {\n    const { x, y } = this.getTargetedPosition(this._currentFacingPosition)\n    if(!this.isInteraction(x, y)) return\n    const interaction = this.getInteraction(x, y)\n    this._taskQueue.addTask(new Task(\n      `${interaction.type}-interaction-start`,\n      {\n        playerFacingPosition: this._currentFacingPosition,\n        ...interaction\n      }\n    ))\n  }\n  updatePositionOnDOM(direction: keyof Movements): void {\n    let [ left, top ] = this.playerPositionOnDOM\n    const movements: Movements = {\n      up: () => top -= this.height,\n      down: () => top += this.height,\n      left: () => left -= this.width,\n      right: () => left += this.width\n    }\n    movements[direction]()\n    this.setPlayerPositionOnDom(left, top)\n  }\n  setFacingPosition(direction: keyof PlayerFacingPositions): void {\n    this._currentFacingPosition = direction\n    const [x, y] = this._playerFacingPositions[direction]\n    this.domElement.style.backgroundPosition = `${x}px ${y - 24}px`\n  }\n  get playerPositionOnDOM(): number[] {\n    const { left, top } = this.domElement.style\n    const newLeft = Number(left.substring(0, left.length - 2))\n    const newTop = Number(top.substring(0, top.length - 2))\n    return [newLeft, newTop]\n  }\n  setPlayerPositionOnDom(x: number, y:number): void {\n    this.domElement.style.left = `${x}px`\n    this.domElement.style.top = `${y}px`\n  }\n  setInitialPositionOnDom(): void {\n    const { x, y } = this._position\n    this.domElement.style.top = `${y * this.height}px`\n    this.domElement.style.left = `${x * this.width}px`\n  }\n  createElement(): HTMLElement {\n    const element = document.createElement('div')\n    const { path, sheet, width, height } = this.sprite\n    const [[x, y]] = sheet\n    this.width = width\n    this.height = height\n    element.style.backgroundImage = `url('${path}')`\n    element.style.backgroundPosition = `${x}px ${y - 24}px`\n    element.style.backgroundRepeat = 'no-repeat'\n    element.style.width = `${width}px`\n    element.style.height = `${height}px`\n    element.style.position = 'absolute'\n    element.style.transition = 'left 200ms linear, top 200ms linear'\n    element.style.willChange = 'left, top'\n    return element\n  }\n  debug(x: number, y: number): void{\n    const element = document.createElement('div')\n    element.className = 'space'\n    element.dataset.x = x.toString()\n    element.dataset.y = y.toString()\n    element.style.top = `${y * this.height}px`\n    element.style.left = `${x * this.width}px`\n    document.getElementById('root').append(element)\n  }\n  createAnimations(): void {\n    const { sheet } = this.sprite\n    this.animator = new Animator(this.domElement)\n    this.animator.addAnimation(\n      'down',\n      [\n        sheet[1],\n        sheet[2],\n        sheet[0],\n      ],\n      50,\n    )\n    this.animator.addAnimation(\n      'up',\n      [\n        sheet[7],\n        sheet[8],\n        sheet[6],\n      ],\n      50,\n    )\n    this.animator.addAnimation(\n      'left',\n      [\n        sheet[13],\n        sheet[14],\n        sheet[12],\n      ],\n      50,\n    )\n    this.animator.addAnimation(\n      'right',\n      [\n        sheet[19],\n        sheet[20],\n        sheet[18],\n      ],\n      50,\n    )\n  }\n  setFacingPositions() {\n    const { sheet } = this.sprite\n    this._playerFacingPositions = {\n      'up': sheet[6],\n      'down': sheet[0],\n      'right': sheet[18],\n      'left': sheet[12],\n    }\n  }\n  async init(startingPosition: Position): Promise<HTMLElement> {\n    this._position = startingPosition\n    await this.sprite.init()\n    this.domElement = this.createElement()\n    this.setFacingPositions()\n    this.createAnimations()\n    this.setInitialPositionOnDom()\n    return this.domElement\n  }\n  // Listen for Space key globally (should be set up in your main game init)\n  // Example: document.addEventListener('keydown', ...)\n  // Add this method to handle vocab interaction\n  handleVocabInteraction(): void {\n    if(this._nearbyVocabObject) {\n      // Replace this with your actual dialogue/UI system\n      alert(`Deutsch: ${this._nearbyVocabObject.german}`)\n      // Optionally, mark as collected or trigger animation\n    }\n  }\n}\n","import { Sprite, Task, TaskQueue } from '../helpers'\nimport { Observer } from './'\nimport { Levels, Movements, Position, StoredBackgroundPositions } from '../interfaces'\nimport { Player } from './player'\n\nexport class Camera extends Observer {\n  private _acceptedTasks: Set<string>\n  private _visibleWidth: number\n  private _visibleHeight: number\n  private _collisionWidth: number\n  private _collisionHeight: number\n  private _playerBoundaries: number[]\n  private _isDebugMode: boolean\n  private _player: Player\n  private _backgroundElement: HTMLElement\n  private _cameraPosition: number[]\n  private _taskQueue: TaskQueue\n  private _currentLevel: keyof Levels\n  private _storedBackgroundPositions: StoredBackgroundPositions\n  public domElement: HTMLElement\n  constructor(\n    taskQueue: TaskQueue,\n    width: number,\n    height: number,\n    backgroundElement: HTMLElement,\n    currentLevel: keyof Levels,\n    isDebugMode: boolean = false\n  ) {\n    super()\n    this._taskQueue = taskQueue\n    this._storedBackgroundPositions = {}\n    this._currentLevel = currentLevel\n    this._acceptedTasks = new Set(['movement', 'scene-transition-start'])\n    this._visibleWidth = width\n    this._visibleHeight = height\n    this._collisionWidth = width / 10 * 8\n    this._collisionHeight = height / 10 * 6\n    this._playerBoundaries = [512, 96, 256, 128]\n    this._isDebugMode = isDebugMode\n    this._player = null\n    this._backgroundElement = backgroundElement\n    this._cameraPosition = [0, 0]\n    this.domElement = null\n  }\n  handleUpdate({ name, action }: Task): void {\n    if (!this._acceptedTasks.has(name)) return\n    switch (name) {\n      case 'movement':\n        this.handleMovement()\n      break\n      case 'scene-transition-start':\n        this.handleSceneTransitionStart(action)\n      break\n    }\n  }\n  resetGym(): void {\n    [\n      'gymEntrance',\n      'gymArena1PreBattle',\n      'gymArena2PreBattle',\n      'gymArena3PreBattle',\n      'gymArena4PreBattle',\n      'gymArena5PreBattle',\n      'gymArena1PostBattle',\n      'gymArena2PostBattle',\n      'gymArena3PostBattle',\n      'gymArena4PostBattle',\n      'gymArena5PostBattle',\n      'gymArena6',\n    ].forEach(l => delete this._storedBackgroundPositions[l])\n  }\n  handleMovement(): void {\n    const [ left, top ] = this._player.playerPositionOnDOM\n    const [ maxLeft, maxRight, maxTop, maxBottom] = this._playerBoundaries\n    let selectedMovement: keyof Movements = null\n    if(left > maxLeft) {\n      selectedMovement = 'left'\n    } else if(left < maxRight) {\n      selectedMovement = 'right'\n    } else if (top >= maxTop) {\n      selectedMovement = 'up'\n    } else if( top < maxBottom) {\n      selectedMovement = 'down'\n    }\n    if(!selectedMovement) return\n    this._player.updatePositionOnDOM(selectedMovement)\n    this.moveCamera(selectedMovement)\n    this._taskQueue.addTask(new Task('npc-movement', selectedMovement))\n  }\n  handleSceneTransitionStart(action: any) {\n    this._storedBackgroundPositions[this._currentLevel] = this.currentBackgroundPosition\n    console.log(this._storedBackgroundPositions[this._currentLevel])\n    const {\n      backgroundPositionOnDOM,\n      level\n    } = action\n    console.log(backgroundPositionOnDOM)\n    this._currentLevel = level\n    this._cameraPosition = this._storedBackgroundPositions[this._currentLevel]\n                            || backgroundPositionOnDOM\n    console.log(this._cameraPosition)\n    this.updatePositionOnDOM()\n    if(level === 'home') this.resetGym()\n  }\n  moveCamera(direction: keyof Movements): void {\n    const { width, height } = this._player\n    let [ x, y ] = this._cameraPosition\n    const movements: Movements = {\n      up: () => y -= height,\n      down: () => y += height,\n      left: () => x -= width,\n      right: () => x += width\n    }\n    movements[direction]()\n    this._cameraPosition = [ x, y ]\n    this.updatePositionOnDOM()\n  }\n  updatePositionOnDOM(): void {\n    const [x, y] = this._cameraPosition\n    this._backgroundElement.style.backgroundPosition = `${x}px ${y}px`\n  }\n  get currentBackgroundPosition(): number[] {\n    const { backgroundPositionX , backgroundPositionY } = this._backgroundElement.style\n    const x = Number(backgroundPositionX.substring(0, backgroundPositionX.length - 2))\n    const y = Number(backgroundPositionY.substring(0, backgroundPositionY.length - 2))\n    return [x, y]\n  }\n  createElement(): HTMLElement {\n    const element = document.createElement('div')\n    element.style.width = `${this._collisionWidth}px`\n    element.style.height = `${this._collisionHeight}px`\n    element.style.position = 'absolute'\n    if(this._isDebugMode) {\n      element.style.border = '2px solid red'\n      element.style.boxSizing = 'border-box'\n    }\n    return element\n  }\n  init(player: Player): HTMLElement {\n    this._player = player\n    this.domElement = this.createElement()\n    return this.domElement\n  }\n}\n","import { levels } from '../data'\nimport { Observer } from '.'\nimport { Task } from '../helpers'\nimport { Interaction, Position, SceneTransition, Tile } from '../interfaces'\n\nexport class Level extends Observer {\n  public _acceptedTasks: Set<string>\n  public root: HTMLElement\n  public name: string\n  public grid: any\n  constructor(name: string, root: HTMLElement, isDebugMode: boolean = false) {\n    super()\n    this._acceptedTasks = new Set(['scene-transition-start'])\n    this.root = root\n    this.name = name\n    this.grid = levels[name].default\n    if(isDebugMode) {\n      this.triggerDebugView()\n    }\n  }\n  handleUpdate({ name, action}: Task): void {\n    if (!this._acceptedTasks.has(name)) return\n    switch(name) {\n      case 'scene-transition-start':\n        this.handleSceneTransitionStart(action)\n      break;\n    }\n  }\n  handleSceneTransitionStart(action: any) {\n    const {\n      level,\n    } = action\n    this.changeGrid(level)\n    const { path } = this.grid\n    this.changeMap(path)\n  }\n  getTile(x: number, y:number): Tile {\n    return this.grid[`${x}/${y}`]\n  }\n  getSceneTransition(x: number, y:number): SceneTransition {\n    return this.getTile(x, y).sceneTransition\n  }\n  getInteraction(x: number, y: number): Interaction {\n    return this.getTile(x, y).interaction\n  }\n  isSpaceWalkable(x: number, y: number): boolean {\n    if(!this.getTile(x, y)) return false\n    return this.getTile(x, y).isWalkable\n  }\n  isSceneTransition(x: number, y: number): boolean {\n    if (!this.getTile(x, y).sceneTransition) return false\n    return !!this.getTile(x, y).sceneTransition\n  }\n  isInteraction(x: number, y: number): boolean {\n    if (!this.getTile(x, y).interaction) return false\n    return !!this.getTile(x, y).interaction\n  }\n  triggerDebugView(): void {\n    for(const tile in this.grid) {\n      const { x, y, isWalkable} = this.grid[tile]\n      const element = document.createElement('div')\n      element.className = 'space'\n      element.style.top = `${y * 64}px`\n      element.style.left = `${x * 32}px`\n      element.textContent = `${x}/${y}`\n      if(isWalkable) {\n        element.style.border = '2px solid green'\n      } else {\n        element.style.border = '2px solid red'\n      }\n      this.root.append(element)\n    }\n    this.root.style.width = '1920px'\n    this.root.style.height = '1280px'\n  }\n  changeMap(path: string): void {\n    this.root.style.backgroundImage = `url('${path}')`\n  }\n  changeGrid(gridName: string): void {\n    this.grid = levels[gridName].default\n  }\n  shiftBackgroundPosition(x: number, y:number) {\n    this.root.style.backgroundPosition = `${x}px ${y}px`\n  }\n  init(): Position {\n    const { path, playerSpawnPoint, backgroundSpawnPoint} = this.grid\n    const [x, y] = backgroundSpawnPoint\n    this.changeMap(path)\n    this.shiftBackgroundPosition(x, y)\n    return playerSpawnPoint\n  }\n}\n","import { Task, TaskQueue } from \"../helpers\";\nimport { KeyTable } from '../interfaces'\nimport { Observer } from \"./\";\nexport class Input extends Observer {\n  private _isDisabled: boolean\n  private _currentMode: keyof KeyTable\n  private _acceptedTasks: Set<string>\n  private _movementKeys: Set<string>\n  private _taskQueue: TaskQueue\n  private _keyTable: KeyTable\n  private _walkingInterval: number\n  private _isWalking: boolean\n  constructor(taskQueue: TaskQueue) {\n    super()\n    this._isDisabled = true\n    this._isWalking = false\n    this._acceptedTasks = new Set([\n      'npc-interaction-start',\n      'npc-interaction-end',\n      'scene-transition-start',\n      'scene-transition-end',\n      'battle-start',\n      'battle-navigate-answer',\n      'disable-input',\n      'enable-input',\n      'simulate-input'\n    ])\n    this._currentMode = 'walking'\n    this._taskQueue = taskQueue\n    this._movementKeys = new Set(['w', 'a', 's', 'd'])\n    this._keyTable = {\n      walking: {\n        'w': ['movement', 'up'],\n        'a': ['movement', 'left'],\n        's': ['movement', 'down'],\n        'd': ['movement', 'right'],\n        ' ': ['interaction', null]\n      },\n      dialogue: {\n        ' ': ['dialogue', null]\n      },\n      battle: {\n        'w': ['battle', 'selectPreviousAnswer'],\n        's': ['battle', 'selectNextAnswer'],\n        ' ': ['battle', null]\n      }\n    }\n  }\n  get isDisabled(): boolean {\n    return this._isDisabled\n  }\n  set isDisabled(bool: boolean) {\n    this._isDisabled = bool\n  }\n  handleUpdate({ name, action }: Task): void {\n    if (!this._acceptedTasks.has(name)) return\n    switch (name) {\n      case 'scene-transition-start':\n        this.handleSceneTransitionStart()\n      break\n      case 'scene-transition-end':\n        this.handleSceneTransitionEnd()\n      break\n      case 'npc-interaction-start':\n        this.handleNPCInteractionStart()\n      break\n      case 'npc-interaction-end':\n        this.handleNPCInteractionEnd()\n      break\n      case 'battle-start':\n        this.handleBattleStart()\n      break\n      case 'battle-navigate-answer':\n        this.handleBattleNavigateAnswer()\n      break\n      case 'disable-input':\n        this.handleDisableInput()\n      break\n      case 'enable-input':\n        this.handleEnableInput()\n      break\n      case 'simulate-input':\n        this.handleSimulateInput(action)\n        break\n    }\n  }\n  handleSimulateInput(key: string) {\n    console.log(key)\n    this.handleInput({ key } as KeyboardEvent)\n  }\n  handleDisableInput() {\n    this.isDisabled = true\n  }\n  handleEnableInput() {\n    this.isDisabled = false\n  }\n  handleBattleNavigateAnswer(): void {\n    this.isDisabled = false\n    this._currentMode = 'battle'\n  }\n  handleBattleStart() {\n    this.isDisabled = true\n  }\n  handleNPCInteractionEnd() {\n    this._currentMode = 'walking'\n  }\n  handleNPCInteractionStart(): void {\n    this._currentMode = 'dialogue'\n  }\n  handleSceneTransitionStart(): void {\n    this.isDisabled = true\n  }\n  handleSceneTransitionEnd(): void {\n    this.isDisabled = false\n  }\n  handleInput({ key }: KeyboardEvent): void {\n    if(this.isDisabled) return\n    const keyTable = this._keyTable[this._currentMode]\n    if(!keyTable[key]) return\n    const [ name, action ] = keyTable[key]\n    if(name === 'movement' && this._isWalking) return\n    this._taskQueue.addTask(new Task(name, action))\n    if (name === 'movement') this.startWalkingLoop(name, action)\n  }\n  handleWalkingLogic({ key }: KeyboardEvent) {\n    if(this._movementKeys.has(key)) {\n      this.stopWalkingLoop()\n    }\n  }\n  startWalkingLoop(name: any, action: any) {\n    this._isWalking = true\n    this._walkingInterval = window.setInterval(() => {\n      this._taskQueue.addTask(new Task(name, action))\n    }, 200)\n  }\n  stopWalkingLoop() {\n    clearInterval(this._walkingInterval)\n    this._isWalking = false\n  }\n  init(): void {\n    window.addEventListener('keydown', this.handleInput.bind(this))\n    window.addEventListener('keyup', this.handleWalkingLogic.bind(this))\n    // player.addEventListener('transitionstart', () => {\n    //   this.isDisabled = true\n    // })\n    // player.addEventListener('transitionend', () => {\n    //   this.isDisabled = false\n    // })\n    this.isDisabled = false\n  }\n}\n","import { NPC, Sprite, Task } from '../helpers'\nimport { npcData } from '../data'\nimport { Observer } from './'\nimport { Movements, NPCList, Position, SceneTransition } from '../interfaces'\n\nexport class NPCManager extends Observer {\n  private _currentLevel: string\n  private _root: HTMLElement\n  private _npcs: NPCList\n  private npcData: any\n  private _acceptedTasks: Set<string>\n  constructor(\n    currentLevel: string,\n    root: HTMLElement\n  ) {\n    super()\n    this._root = root\n    this._currentLevel = currentLevel\n    this._npcs = {}\n    this.npcData = npcData[currentLevel]\n    this._acceptedTasks = new Set(['npc-movement', 'npc-interaction-start', 'scene-transition-start'])\n  }\n  get npcs(): NPC[] {\n    return this._npcs[this._currentLevel]\n  }\n  set npcs(npcs: NPC[]) {\n    this._npcs[this._currentLevel] = npcs\n  }\n  handleUpdate({name, action}: Task): void {\n    if (!this._acceptedTasks.has(name)) return\n    switch (name) {\n      case 'npc-movement':\n        this.handleNPCMovement(action as keyof Movements)\n      break\n      case 'npc-interaction-start':\n        this.handleNPCInteractionStart(action)\n      break\n      case 'scene-transition-start':\n        this.handleSceneTransitionStart(action)\n      break\n    }\n  }\n  resetGym(): void {\n    [\n      'gymEntrance',\n      'gymArena1PreBattle',\n      'gymArena2PreBattle',\n      'gymArena3PreBattle',\n      'gymArena4PreBattle',\n      'gymArena5PreBattle',\n      'gymArena1PostBattle',\n      'gymArena2PostBattle',\n      'gymArena3PostBattle',\n      'gymArena4PostBattle',\n      'gymArena5PostBattle',\n      'gymArena6'\n    ].forEach(l => delete this._npcs[l])\n  }\n  handleNPCInteractionStart(action: any): void {\n    const { name, playerFacingPosition } = action\n    const npc = this.npcs.find(npc => npc.name === name)\n    npc.faceTowardsPlayer(playerFacingPosition)\n  }\n  handleNPCMovement(direction: keyof Movements): void {\n    this.npcs.forEach(npc => npc.handleMovement(direction))\n  }\n  async handleSceneTransitionStart({ level }: SceneTransition): Promise<void> {\n    this.npcs.forEach(npc => npc.ejectFromDom())\n    this.switchLevel(level)\n    let npcElements = null\n    if(!this.npcs) {\n      npcElements = await this.init()\n    } else {\n      npcElements = this.npcs.map(npc => npc.domElement)\n    }\n    this._root.append(...npcElements)\n    if (level === 'home') this.resetGym()\n\n  }\n  switchLevel(newLevel: string) {\n    this.npcData = npcData[newLevel]\n    this._currentLevel = newLevel\n  }\n  async init(): Promise<Array<HTMLElement>> {\n    const npcs: NPC[] = []\n    const npcElements = []\n    for(let i = 0; i < this.npcData.length; i++) {\n      const { path, startingPosition, facingPosition, positionOnDOM, name } = this.npcData[i]\n      const npcData: NPC = new NPC(name, path, facingPosition)\n      const element = await npcData.init(startingPosition, positionOnDOM)\n      npcs.push(npcData)\n      npcElements.push(element)\n    }\n    this.npcs = npcs\n    return npcElements\n  }\n}\n","import { Task, TaskQueue } from '../helpers'\nimport { DialogueData, Interaction, Levels, SceneTransition } from '../interfaces'\nimport { Observer } from './'\nimport { dialogueData } from '../data'\n\nexport class Dialogue extends Observer {\n  private _acceptedTasks: Set<string>\n  private _currentLevel: keyof Levels\n  private _dialogues: {\n    hasBattled?: boolean\n    preBattle?: DialogueData[]\n    postBattle?: DialogueData[]\n  }\n  private _currentDialogue: DialogueData[]\n  private _taskQueue: TaskQueue\n  private _writingIntervalId: number\n  private _currentWritingText: string[]\n  public containerElement: HTMLElement\n  public headingElement: HTMLElement\n  public contentElement: HTMLElement\n  private _isShowing: boolean\n  constructor(taskQueue: TaskQueue, currentLevel: keyof Levels) {\n    super()\n    this._acceptedTasks = new Set(['npc-interaction-start', 'scene-transition-start', 'dialogue', 'npc-interaction-end', 'battle-start', 'npc-battle-end'])\n    this._currentLevel = currentLevel\n    this._currentDialogue = []\n    this._writingIntervalId = null\n    this._currentWritingText = []\n    this._taskQueue = taskQueue\n    this._dialogues = dialogueData[currentLevel]\n    this._isShowing = false\n    this.containerElement = null\n    this.headingElement = null\n    this.contentElement = null\n  }\n  handleUpdate({ name, action }: Task): void {\n    if (!this._acceptedTasks.has(name)) return\n    switch (name) {\n      case 'npc-interaction-start':\n        this.handleNPCInteractionStart(action)\n      break\n      case 'npc-interaction-end':\n        this.handleNPCInteractionEnd()\n        break\n      case 'scene-transition-start':\n        this.handleSceneTransitionStart(action)\n      break\n      case 'dialogue':\n        this.handleDialogue()\n      break\n      case 'battle-start':\n        this.handleNPCInteractionEnd()\n      break\n      case 'npc-battle-end':\n        this.handleNPCBattleEnd(action)\n      break\n    }\n  }\n  handleNPCBattleEnd({ name, level}: any): void {\n    dialogueData[level][name].hasBattled = true\n  }\n  handleNPCInteractionEnd() {\n    this.hide()\n    this.heading = ''\n    this.content = ''\n    this._currentWritingText = []\n  }\n  handleDialogue(): void {\n    if(this._currentWritingText.length) {\n      clearInterval(this._writingIntervalId)\n      this.content = this.content + this._currentWritingText.join('')\n      this._currentWritingText = []\n      return\n    }\n    const { text, isTrigger, type, action } = this._currentDialogue.shift()\n    if(isTrigger) {\n      if(Array.isArray(type) || Array.isArray(action)) {\n        action.forEach((a: any, i: number) => {\n          this._taskQueue.addTask(\n            new Task(\n              type[i],\n              a\n            )\n          )\n        })\n      } else {\n        this._taskQueue.addTask(\n          new Task(\n            type,\n            action || null\n          )\n        )\n      }\n      return\n    }\n    this._currentWritingText = text.split('')\n    this.writeText()\n  }\n  handleNPCInteractionStart(action: Interaction) {\n    const { name } = action\n    const dialogue = this._dialogues[name]\n    this._currentDialogue = [...dialogue.hasBattled ? dialogue.postBattle : dialogue.preBattle]\n    const { text } = this._currentDialogue.shift()\n    this.heading = name\n    this._currentWritingText = text.split('')\n    this.writeText()\n    this.show()\n  }\n  writeText() {\n    this.content = ''\n    this._writingIntervalId = window.setInterval(() => {\n      if(!this._currentWritingText.length) {\n        clearInterval(this._writingIntervalId)\n        return\n      }\n      const letter = this._currentWritingText.shift()\n      this.content = this.content + letter\n    }, 50)\n  }\n  handleSceneTransitionStart({ level }: SceneTransition): void{\n    this._dialogues = dialogueData[level]\n    this._currentLevel = level\n    // Edge case, in too deep, need bandaid :(\n    if (level === 'home') dialogueData.gymArena6.Shashank.hasBattled = false\n  }\n  show(): void {\n    this.isShowing = true\n  }\n  hide(): void {\n    this.isShowing = false\n  }\n  get isShowing(): boolean {\n    return this._isShowing\n  }\n  set isShowing(bool: boolean) {\n    this._isShowing = bool\n    if(this._isShowing) {\n      this.containerElement.style.bottom = '20px'\n      this.containerElement.style.opacity = '1'\n    } else {\n      this.containerElement.style.bottom = '-115px'\n      this.containerElement.style.opacity = '0'\n    }\n  }\n  set heading(text: string) {\n    this.headingElement.textContent = text\n  }\n  get content(): string {\n    return this.contentElement.textContent\n  }\n  set content(text: string) {\n    this.contentElement.textContent = text\n  }\n  createElement(): void {\n    const container = document.createElement('div')\n    container.style.width = '500px'\n    container.style.height = '120px'\n    container.style.bottom = '-115px'\n    container.style.opacity = '0'\n    container.style.position = 'absolute'\n    container.style.border = '6px solid rosybrown'\n    container.style.borderRadius = '6px'\n    container.style.backgroundColor = 'beige'\n    container.style.transition = 'bottom 300ms, opacity 300ms'\n    const heading = document.createElement('div')\n    heading.style.fontSize = '18px'\n    heading.style.paddingLeft = '8px'\n    const headingLine = document.createElement('hr')\n    headingLine.style.margin = '2px 0'\n    const content = document.createElement('div')\n    content.style.padding = '0 8px'\n    container.append(\n      heading,\n      headingLine,\n      content\n    )\n    this.headingElement = heading\n    this.contentElement = content\n    this.containerElement = container\n  }\n  init(): HTMLElement {\n    this.createElement()\n    return this.containerElement\n  }\n}\n","\nimport { Delay, Task, TaskQueue } from '../../helpers'\nimport { Observer } from '../'\nimport { battleData, generalQuestions } from '../../data'\nimport { BattleComponents, BattleData, Levels, Question, QuestionData } from '../../interfaces'\nimport {\n  Arena,\n  BackDrop,\n  EnemyFighter,\n  EnemyUI,\n  PlayerFighter,\n  PlayerUI,\n  HP\n} from '.'\n\nexport class Battle extends Observer {\n\n  private _acceptedTasks: Set<string>;\n  private _taskQueue: TaskQueue;\n  private _currentLevel: keyof Levels;\n  private _currentQuestions: Question[];\n  private _currentQuestion: Question;\n  private _currentLevelQuestionData: { [key: string]: any };\n  private _selectedQuestionData: any;\n  private _battleData: any;\n  private _battleComponents: BattleComponents;\n  private _stagedFeedback: { awaiting: boolean, correctIndexes: number[], justAnswered: boolean, awaitingSummary: boolean } = { awaiting: false, correctIndexes: [], justAnswered: false, awaitingSummary: false };\n  constructor(taskQueue: TaskQueue, currentLevel: keyof Levels) {\n    super()\n    this._acceptedTasks = new Set(['scene-transition-start', 'battle-start', 'battle-end', 'battle'])\n    this._currentLevel = currentLevel\n    this._taskQueue = taskQueue\n    this._battleData = battleData\n    this._currentLevelQuestionData = battleData[currentLevel as keyof typeof battleData]\n    this._currentQuestions = null\n    this._selectedQuestionData = null\n    this._battleComponents = {\n      arena: new Arena(),\n      backdrop: new BackDrop(),\n      enemyFighter: new EnemyFighter(false),\n      enemyUI: new EnemyUI(false),\n      playerFighter: new PlayerFighter(true),\n      playerUI: new PlayerUI(true),\n      playerHP: new HP(true),\n      enemyHP: new HP(false)\n    }\n  }\n  handleUpdate({ name, action }: Task): void {\n    if (!this._acceptedTasks.has(name)) return\n    switch (name) {\n      case 'battle-start':\n        this.handleBattleStart(action)\n        break\n      case 'battle-end':\n        this.handleBattleEnd(action)\n        break\n      case 'scene-transition-start':\n        this.handleSceneTransitionStart(action)\n        break;\n      case 'battle':\n        this.handleBattle(action)\n        break;\n    }\n  }\n  async handleBattleEnd(wasLoss: boolean): Promise<void> {\n    await Delay.delay(500)\n    Object.values(this._battleComponents).forEach((component: any) => component.hide());\n    await Delay.delay(500)\n    const { playerUI, enemyUI, playerHP, enemyHP } = this._battleComponents\n    playerUI.resetSelection()\n    enemyUI.reset()\n    playerHP.reset()\n    enemyHP.reset()\n    this._taskQueue.addTask(\n      new Task('npc-interaction-end')\n    )\n    this._taskQueue.addTask(\n      new Task('enable-input')\n    )\n    if(!wasLoss) {\n      this._taskQueue.addTask(new Task('simulate-input', ' '))\n    }\n  }\n  async handleBattle(action: any): Promise<void> {\n    // Staged feedback state\n    if (!this._stagedFeedback) this._stagedFeedback = { awaiting: false, correctIndexes: [], justAnswered: false, awaitingSummary: false };\n    if (!action) {\n      this._taskQueue.addTask(new Task('disable-input'));\n      const { playerUI, enemyUI, playerHP, enemyHP, playerFighter, enemyFighter } = this._battleComponents;\n      const selected = playerUI.selectedAnswer;\n      const correctRaw = this._currentQuestion.correct;\n      const correctArr: number[] = Array.isArray(correctRaw) ? correctRaw : [correctRaw];\n      const isMulti = correctArr.length > 1;\n      const isCorrect = correctArr.includes(selected);\n      // Handle staged feedback for multi-answer questions\n      if (this._stagedFeedback.awaitingSummary && isMulti) {\n        playerUI.highlightMultipleCorrect(correctArr);\n        await Delay.delay(500);\n        await enemyUI.writeText(this._currentQuestion.feedbackCorrect || \"Richtig! Gut gemacht.\");\n        await Delay.delay(1200);\n        enemyHP.damage();\n        await enemyFighter.damage();\n        await Delay.delay(500);\n        playerUI.hide();\n        await Delay.delay(500);\n        // End battle immediately if enemy HP is zero\n        if (enemyHP.isDead) {\n          const { winningMessage, onWin } = this._selectedQuestionData;\n          await enemyUI.writeText(winningMessage);\n          await Delay.delay(500);\n          const { name, action } = onWin;\n          this._taskQueue.addTask(new Task(name, action));\n          this._taskQueue.addTask(new Task('battle-end', false));\n          return;\n        }\n        this._currentQuestion = this._currentQuestions.shift();\n        this._stagedFeedback = { awaiting: false, correctIndexes: [], justAnswered: false, awaitingSummary: false };\n        if (this._currentQuestion) {\n          playerUI.resetSelection();\n          playerUI.setAnswers(this._currentQuestion.answers);\n          await enemyUI.writeText(this._currentQuestion.question);\n          await Delay.delay(500);\n          playerUI.show();\n          this._taskQueue.addTask(new Task('enable-input'));\n        }\n        return;\n      } else if (isCorrect && isMulti) {\n        if (!this._stagedFeedback.correctIndexes.includes(selected)) {\n          this._stagedFeedback.correctIndexes.push(selected);\n        }\n        playerUI.setCorrect();\n        await Delay.delay(500);\n        const feedback = this._currentQuestion.feedbackCorrectOptions?.[selected] || this._currentQuestion.feedbackCorrect || \"Richtig! Gut gemacht.\";\n        await enemyUI.writeText(feedback);\n        await Delay.delay(1200);\n        this._stagedFeedback.awaitingSummary = true;\n        this._taskQueue.addTask(new Task('enable-input'));\n        return;\n      } else if (isCorrect) {\n        playerUI.setCorrect();\n        await Delay.delay(500);\n        await enemyUI.writeText(this._currentQuestion.feedbackCorrect || \"Richtig! Gut gemacht.\");\n        await Delay.delay(1200);\n        enemyHP.damage();\n        await enemyFighter.damage();\n        await Delay.delay(500);\n        playerUI.hide();\n        await Delay.delay(500);\n        // End battle immediately if enemy HP is zero\n        if (enemyHP.isDead) {\n          const { winningMessage, onWin } = this._selectedQuestionData;\n          await enemyUI.writeText(winningMessage);\n          await Delay.delay(500);\n          const { name, action } = onWin;\n          this._taskQueue.addTask(new Task(name, action));\n          this._taskQueue.addTask(new Task('battle-end', false));\n          return;\n        }\n        this._currentQuestion = this._currentQuestions.shift();\n      } else {\n        playerUI.setWrong();\n        await Delay.delay(500);\n        const feedback = this._currentQuestion.feedbackWrongOptions?.[selected]\n          || this._currentQuestion.feedbackWrong\n          || \"Nicht ganz. Versuch es noch einmal!\";\n        await enemyUI.writeText(feedback);\n        await Delay.delay(1200);\n        playerHP.damage();\n        await playerFighter.damage();\n        await Delay.delay(500);\n        // End battle immediately if player HP is zero\n        if (playerHP.isDead) {\n          const { losingMessage, onLoss } = this._selectedQuestionData;\n          await enemyUI.writeText(losingMessage);\n          await Delay.delay(500);\n          const { name, action } = onLoss;\n          if (name || action) this._taskQueue.addTask(new Task(name, action));\n          this._taskQueue.addTask(new Task('battle-end', true));\n          return;\n        }\n        // Do NOT advance question, let player try again\n      }\n      // If either HP is dead (should be unreachable, but safe)\n      if (playerHP.isDead || enemyHP.isDead) {\n        const { winningMessage, losingMessage, onWin, onLoss } = this._selectedQuestionData;\n        const message = playerHP.isDead ? losingMessage : winningMessage;\n        await enemyUI.writeText(message);\n        await Delay.delay(500);\n        if (playerHP.isDead) {\n          const { name, action } = onLoss;\n          if (name || action) this._taskQueue.addTask(new Task(name, action));\n        } else {\n          const { name, action } = onWin;\n          this._taskQueue.addTask(new Task(name, action));\n        }\n        this._taskQueue.addTask(new Task('battle-end', playerHP.isDead));\n        return;\n      }\n      playerUI.resetSelection();\n      playerUI.setAnswers(this._currentQuestion.answers);\n      await enemyUI.writeText(this._currentQuestion.question);\n      await Delay.delay(500);\n      playerUI.show();\n      this._taskQueue.addTask(new Task('enable-input'));\n    } else {\n      const fn = (this._battleComponents.playerUI as any)[action];\n      if (typeof fn === 'function') fn.call(this._battleComponents.playerUI);\n    }\n  }\n  handleSceneTransitionStart({ level }: any): void {\n    this._currentLevel = level\n    this._currentLevelQuestionData = battleData[level as keyof typeof battleData]\n  }\n  async handleBattleStart({ fighter }: any): Promise<void> {\n    if (!this._currentLevelQuestionData) throw new Error('Missing questions for this map.')\n    this._selectedQuestionData = this._currentLevelQuestionData[fighter]\n    if (!this._selectedQuestionData) throw new Error('Missing questions for this fighter.')\n    // Dynamic question selection by difficulty\n    let questions: Question[] = [];\n    if (Array.isArray(this._selectedQuestionData.questions) && this._selectedQuestionData.questions.length > 0) {\n      questions = [...this._selectedQuestionData.questions]\n    } else if (Array.isArray((this._selectedQuestionData as any).questionDifficulties)) {\n      // @ts-ignore: generalQuestions is imported as an object, but is actually an array\n      const allQuestions: Question[] = (generalQuestions as any).default || (generalQuestions as any);\n      const difficulties: string[] = (this._selectedQuestionData as any).questionDifficulties;\n      questions = allQuestions.filter(q => difficulties.includes(q.difficulty));\n    } else {\n      // fallback: use all general questions\n      // @ts-ignore\n      questions = (generalQuestions as any).default || (generalQuestions as any);\n    }\n    this._currentQuestions = [...questions];\n    this.shuffleQuestions()\n    this._currentQuestion = this._currentQuestions.shift()\n    const  {\n      arena,\n      backdrop,\n      enemyFighter,\n      enemyUI,\n      playerFighter,\n      playerUI,\n      playerHP,\n      enemyHP\n    } = this._battleComponents\n    const {\n      arena: background,\n      name,\n      sprite,\n      damageToEnemy,\n      damageToPlayer,\n      title,\n      openingMessage,\n    } = this._selectedQuestionData\n    arena.set(background)\n    enemyFighter.set(sprite)\n    enemyHP.setDamageCounter(damageToEnemy)\n    playerHP.setDamageCounter(damageToPlayer)\n    playerUI.setAnswers(this._currentQuestion.answers)\n    backdrop.show()\n    await Delay.delay(500)\n    arena.show()\n    await Delay.delay(500)\n    playerFighter.show()\n    enemyFighter.show()\n    await Delay.delay(500)\n    enemyUI.show()\n    await Delay.delay(500)\n    await enemyUI.writeText(`${title} ${name} challenges you to a battle!`)\n    await Delay.delay(500)\n    playerHP.show()\n    enemyHP.show()\n    await Delay.delay(500)\n    await enemyUI.writeText(openingMessage)\n    await Delay.delay(1000)\n    await enemyUI.writeText(this._currentQuestion.question)\n    await Delay.delay(500)\n    playerUI.show()\n    this._taskQueue.addTask(\n      new Task(\n        'battle-navigate-answer',\n        null\n      )\n    )\n  }\n  shuffleQuestions(): void {\n    for(let i = 0; i < this._currentQuestions.length; i++) {\n      const randomNum = Math.floor(Math.random() * this._currentQuestions.length)\n      const placeHolder = this._currentQuestions[i]\n      this._currentQuestions[i] = this._currentQuestions[randomNum]\n      this._currentQuestions[randomNum] = placeHolder\n    }\n  }\n  // writeText() {\n  //   this.content = ''\n  //   this._writingIntervalId = window.setInterval(() => {\n  //     if (!this._currentWritingText.length) {\n  //       clearInterval(this._writingIntervalId)\n  //       return\n  //     }\n  //     const letter = this._currentWritingText.shift()\n  //     this.content = this.content + letter\n  //   }, 50)\n  // }\n  loadPlayerUI(): void {\n    throw new Error('Method not implemented.')\n  }\n  beginQuestion(): void {\n    throw new Error('Method not implemented.')\n  }\n  loadHealthBars(): void {\n    throw new Error('Method not implemented.')\n  }\n  showOpeningMessage(): void {\n    throw new Error('Method not implemented.')\n  }\n  showStartingMessage(): void {\n    throw new Error('Method not implemented.')\n  }\n  loadEnemyUI(): void {\n    throw new Error('Method not implemented.')\n  }\n  loadInCharacters(): void {\n    throw new Error('Method not implemented.')\n  }\n  setupBattleBackground(): void {\n    throw new Error('Method not implemented.')\n  }\n  setupBackdrop(): void {\n    throw new Error('Method not implemented.')\n  }\n}\n","export abstract class BattleComponent {\n  abstract show(): void\n  abstract hide(): void\n}\n","import { BattleComponent } from \".\"\nexport class HP extends BattleComponent{\n  private _health: number\n  private _damage: number\n  private _classBase: string\n  private _healthBarContainer: HTMLElement\n  private _movingPosition: string\n  private _isShowing: boolean\n  private _healthBar: HTMLElement\n  constructor(\n    isPlayer: boolean\n  ) {\n    super()\n    this._health = 100\n    this._damage = null\n    this._classBase = isPlayer ? 'player' : 'enemy'\n    this._movingPosition = isPlayer ? 'left' : 'right'\n    this._healthBarContainer = document.querySelector(`.${this._classBase}-health-bar-container`)\n    this._healthBar = <HTMLElement>this._healthBarContainer.firstElementChild\n    this._isShowing = false\n  }\n  setDamageCounter(damage: number) {\n    this._damage = damage\n  }\n  damage(): void {\n    if(this._health - this._damage < 0) {\n      this._health = 0\n      this._healthBar.style.height = this._health + '%'\n    } else {\n      this._health -= this._damage\n      this._healthBar.style.height = this._health + '%'\n    }\n  }\n  get isDead(): boolean {\n    return !this._health\n  }\n  get isShowing(): boolean {\n    return this._isShowing\n  }\n  set isShowing(bool: boolean) {\n    this._isShowing = bool\n    if (this._isShowing) {\n      this._healthBarContainer.style[this._movingPosition] = '2px'\n    } else {\n      this._healthBarContainer.style[this._movingPosition] = '-26px'\n    }\n  }\n  show() {\n    this.isShowing = true\n  }\n  hide() {\n    this.isShowing = false\n  }\n  reset(): void {\n    this._health = 100\n    this._healthBar.style.height = this._health + '%'\n  }\n}\n","import { BattleComponent } from \".\"\n\nexport abstract class UI extends BattleComponent {\n  private _classBase: string\n  public _uiContainer: HTMLElement\n  private _movingPosition: string\n  private _isShowing: boolean\n  constructor(isPlayer: boolean) {\n    super()\n    this._classBase = isPlayer ? 'player' : 'enemy'\n    this._movingPosition = isPlayer ? 'right' : 'left'\n    this._uiContainer = document.querySelector(`.${this._classBase}-ui`)\n    this._isShowing = false\n  }\n  get isShowing(): boolean {\n    return this._isShowing\n  }\n  set isShowing(bool: boolean) {\n    this._isShowing = bool\n    if(this._isShowing) {\n      this._uiContainer.style[this._movingPosition] = '2px'\n    } else {\n      this._uiContainer.style[this._movingPosition] = '-360px'\n    }\n  }\n  show() {\n    this.isShowing = true\n  }\n  hide() {\n    this.isShowing = false\n  }\n}\n","// Removed duplicate highlightMultipleCorrect\nimport { UI } from \".\";\n\nexport class PlayerUI extends UI {\n  private _answerElements: HTMLElement[]\n  private _selectedAnswer: number\n\n  constructor(isPlayer: boolean) {\n    super(isPlayer)\n    this._answerElements = [...this._uiContainer.querySelectorAll('[data-answer]') as any]\n    this._selectedAnswer = 0\n  }\n  setCorrect() {\n    this._answerElements[this._selectedAnswer].classList.add('correct', 'answer-option')\n  }\n  setWrong() {\n    this._answerElements[this._selectedAnswer].classList.add('wrong', 'answer-option')\n  }\n  resetSelection() {\n    this._answerElements.forEach(a => a.classList.remove('correct', 'wrong', 'answer-option'))\n    this.removeSelectedClass()\n    this._selectedAnswer = 0\n    this.addSelectedClass()\n  }\n  setAnswers(answers: string[]) {\n    for(let i = 0; i < answers.length; i++) {\n      this._answerElements[i].textContent = answers[i]\n    }\n  }\n\n  public highlightMultipleCorrect(indexes: number[]): void {\n    indexes.forEach((idx: number) => {\n      if (this._answerElements[idx]) {\n        this._answerElements[idx].classList.add('correct', 'answer-option');\n      }\n    });\n  }\n  get selectedAnswer(): number {\n    return this._selectedAnswer\n  }\n  selectNextAnswer() {\n    this.removeSelectedClass()\n    if(this._selectedAnswer + 1 === this._answerElements.length) {\n      this._selectedAnswer = 0\n    } else {\n      this._selectedAnswer++\n    }\n    this.addSelectedClass()\n  }\n  selectPreviousAnswer() {\n    this.removeSelectedClass()\n    if(this._selectedAnswer - 1 === -1) {\n      this._selectedAnswer = this._answerElements.length - 1\n    } else {\n      this._selectedAnswer--\n    }\n    this.addSelectedClass()\n  }\n  removeSelectedClass() {\n    this._answerElements[this._selectedAnswer].classList.remove('selected')\n  }\n  addSelectedClass() {\n    this._answerElements[this._selectedAnswer].classList.add('selected')\n  }\n}\n","import { UI } from \".\";\n\nexport class EnemyUI extends UI {\n  private _writingIntervalId: number\n  private _content: HTMLElement\n  constructor(isPlayer: boolean) {\n    super(isPlayer)\n    this._writingIntervalId = null\n    this._content = this._uiContainer.querySelector('.content')\n  }\n  async writeText(text: string): Promise<void> {\n    const message = text.split('')\n    return new Promise(resolve => {\n      this.content = ''\n      this._writingIntervalId = window.setInterval(() => {\n        if (!message.length) {\n          clearInterval(this._writingIntervalId)\n          return resolve()\n        }\n        const letter = message.shift()\n        this.content = this.content + letter\n      }, 50)\n    })\n  }\n  get content(): string {\n    return this._content.textContent\n  }\n  set content(text: string) {\n    this._content.textContent = text\n  }\n  reset(): void {\n    this.content = ''\n  }\n}\n","import { BattleComponent } from \".\"\n\nexport abstract class Fighter extends BattleComponent {\n  private _classBase: string\n  private _movingPosition: string[]\n  private _isShowing: boolean\n  public _characterContainer: HTMLElement\n  constructor(\n    isPlayer: boolean\n  ) {\n    super()\n    this._classBase = isPlayer ? 'player' : 'enemy'\n    this._characterContainer = document.querySelector(`.${this._classBase}`)\n    this._isShowing = false\n    this._movingPosition = isPlayer ? ['left', '64px'] : ['right', '96px']\n  }\n  async damage(): Promise<void> {\n    let blinks: number = 6\n    let intervalId: number = null\n    return new Promise(resolve => {\n      intervalId = window.setInterval(() => {\n        if(!blinks) {\n          clearInterval(intervalId)\n          return resolve()\n        }\n        this._characterContainer.style.opacity = (blinks % 2).toString()\n        blinks--\n      }, 100)\n    })\n  }\n  get isShowing(): boolean {\n    return this._isShowing\n  }\n  set isShowing(bool: boolean) {\n    this._isShowing = bool\n    const [position, value] = this._movingPosition\n    if (this._isShowing) {\n      this._characterContainer.style[position] = value\n    } else {\n      this._characterContainer.style[position] = '-128px'\n    }\n  }\n  show() {\n    this.isShowing = true\n  }\n  hide() {\n    this.isShowing = false\n  }\n}\n","import { Fighter } from \".\";\n\nexport class PlayerFighter extends Fighter {\n  constructor(\n    isPlayer: boolean\n  ) {\n    super(isPlayer)\n  }\n}\n","import { Fighter } from \".\";\nimport { Sprite } from \"../../helpers\";\n\nexport class EnemyFighter extends Fighter {\n  private _enemyBackgrounds: {\n    [key: string]: number[]\n  }\n  private _name: string\n  private _sprite: Sprite\n  private _selectedBackgroundPosition: number[];\n  private _fighterBackgrounds: {\n    [key: string]: number[]\n  };\n  constructor(\n    isPlayer: boolean\n  ) {\n    super(isPlayer)\n    this._name = null\n    this._selectedBackgroundPosition = null\n    this._sprite = new Sprite(\n      'fighter',\n      './assets/images/players/fighters.png',\n      [4, 4]\n    )\n    this._fighterBackgrounds = null\n    this._sprite.init()\n    .then(() => {\n      const { sheet } = this._sprite\n      const [\n        Brett,\n        Min,\n        Dane,,\n        Tomo,\n        Shashank,,,\n        Blaine,\n        Chi,,,\n        Brock\n      ] = sheet\n      this._fighterBackgrounds = {\n        Brett,\n        Min,\n        Tomo,\n        Shashank,\n        Blaine,\n        Brock,\n        Chi,\n        Dane\n      }\n    })\n  }\n  set(name: string): void {\n    this._name = name\n    this._selectedBackgroundPosition = this._fighterBackgrounds[name]\n    const [ x, y ] = this._selectedBackgroundPosition\n    this._characterContainer.style.backgroundPosition = `${x}px ${y}px`\n  }\n}\n","import { BattleComponent } from \".\"\n\nexport class BackDrop extends BattleComponent {\n  private _isShowing: boolean\n  private _backDropElement: HTMLElement\n  constructor() {\n    super()\n    this._isShowing = false\n    this._backDropElement = document.querySelector('.battle-arena-backdrop')\n  }\n  get isShowing(): boolean {\n    return this._isShowing\n  }\n  set isShowing(bool: boolean) {\n    this._isShowing = bool\n    this._backDropElement.style.opacity = Number(this._isShowing).toString()\n  }\n  show() {\n    this.isShowing = true\n  }\n  hide() {\n    this.isShowing = false\n  }\n}\n","import { Sprite } from \"../../helpers\"\nimport { BattleComponent } from \".\"\n\nexport class Arena extends BattleComponent {\n  private _isShowing: boolean\n  private _arenaElement: HTMLElement\n  private _sprite: Sprite\n  private _selectedBackgroundPosition: number[]\n  private _arenaBackgrounds: {\n    [key: string]: number[]\n  }\n  constructor() {\n    super()\n    this._isShowing = false\n    this._arenaElement = document.querySelector('.battle-arena-container')\n    this._selectedBackgroundPosition = null\n    this._sprite = new Sprite(\n      'background',\n      './assets/images/maps/battle-backgrounds.png',\n      [3, 4]\n    )\n    this._arenaBackgrounds = null\n    this._sprite.init()\n    .then(() => {\n      const { sheet } = this._sprite\n      const [\n        normal,\n        rock,\n        dirt,\n        ghost,\n        grass,\n        water,\n        psychic,\n        ,\n        ocean,\n        ice,\n        plant\n      ] = sheet\n      this._arenaBackgrounds = {\n        normal,\n        rock,\n        dirt,\n        ghost,\n        grass,\n        water,\n        psychic,\n        ocean,\n        ice,\n        plant\n      }\n    })\n  }\n  set(arena: string): void {\n    this._selectedBackgroundPosition = this._arenaBackgrounds[arena]\n    const [x, y] = this._selectedBackgroundPosition\n    this._arenaElement.style.backgroundPosition = `${x}px ${y}px`\n  }\n  get isShowing(): boolean {\n    return this._isShowing\n  }\n  set isShowing(bool: boolean) {\n    this._isShowing = bool\n    this._arenaElement.style.opacity = Number(this._isShowing).toString()\n  }\n  show() {\n    this.isShowing = true\n  }\n  hide() {\n    this.isShowing = false\n  }\n}\n","import { Battle } from './battle'\n\nexport * from './battle-component'\nexport * from './hp'\nexport * from './ui'\nexport * from './player-ui'\nexport * from './enemy-ui'\nexport * from './fighter'\nexport * from './player-fighter'\nexport * from './enemy-fighter'\nexport * from './backdrop'\nexport * from './arena'\nexport default Battle\n","import Game from \"./game\";\n\nconst game = new Game()\n\ngame.start()\n","import Engine from './engine'\nimport { Camera, Player, Level, Input, NPCManager, Dialogue } from './entities'\nimport Battle from './entities/battle'\nimport { TaskQueue } from './helpers'\n\nexport default class Game {\n  $root: HTMLElement\n  engine: Engine\n  input: Input\n  taskQueue: TaskQueue\n  level: Level\n  npcManager: NPCManager\n  dialogue: Dialogue\n  camera: Camera\n  player: Player\n  battle: Battle\n  constructor() {\n    this.$root = document.getElementById('root')\n    this.taskQueue = new TaskQueue()\n    this.engine = new Engine(this.taskQueue)\n    this.level = new Level('home', this.$root)\n    this.npcManager = new NPCManager('home', this.$root)\n    this.camera = new Camera(this.taskQueue, 640, 384, this.$root, 'home')\n    this.dialogue = new Dialogue(this.taskQueue, 'home')\n    this.battle = new Battle(this.taskQueue, 'home')\n    this.player = new Player(\n      'MC',\n      './assets/images/players/player.png',\n      [4, 6],\n      this.taskQueue,\n      'home',\n      this.level.isSceneTransition.bind(this.level),\n      this.level.getSceneTransition.bind(this.level),\n      this.level.isInteraction.bind(this.level),\n      this.level.getInteraction.bind(this.level),\n      this.level.isSpaceWalkable.bind(this.level)\n    )\n    this.input = new Input(this.taskQueue)\n  }\n  setupDOM(...args: Array<HTMLElement>) {\n    this.$root.append(...args)\n  }\n  async start(): Promise<void> {\n    const playerSpawnPoint = this.level.init()\n    const playerElement = await this.player.init(playerSpawnPoint)\n    const npcElements = await this.npcManager.init()\n    const cameraElement = this.camera.init(this.player)\n    const dialogueElement = this.dialogue.init()\n    this.setupDOM(playerElement, cameraElement, dialogueElement,...npcElements)\n    this.input.init()\n    // Listen for Space key to trigger vocab interaction\n    document.addEventListener('keydown', (e) => {\n      if (e.code === 'Space') {\n        this.player.handleVocabInteraction()\n      }\n    })\n    this.engine.addObserver(this.camera)\n    this.engine.addObserver(this.battle)\n    this.engine.addObserver(this.player)\n    this.engine.addObserver(this.dialogue)\n    this.engine.addObserver(this.npcManager)\n    this.engine.addObserver(this.level)\n    this.engine.addObserver(this.input)\n    this.engine.start()\n  }\n}\n"],"sourceRoot":""}